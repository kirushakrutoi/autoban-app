version: "3.9"

services:
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.0
    environment:
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloakdb
      KC_DB_USERNAME: kirill
      KC_DB_PASSWORD: 12345
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./app-gtw/src/main/resources/keycloak/import/testRealm.json:/opt/keycloak/data/import/realm.json
    ports:
      - "8080:8080"
    depends_on:
      - keycloakdb
    command:
      - start-dev
      - --db postgres
      - --import-realm
      - --features admin-fine-grained-authz

  keycloakdb:
    image: postgres:15
    container_name: keycloakdb
    volumes:
      - ~/data/postgres/keycloakdb:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: keycloakdb
      POSTGRES_USER: kirill
      POSTGRES_PASSWORD: 12345
    ports:
      - "5432:5432"

  portaldb:
    image: postgres:15
    container_name: portaldb
    volumes:
      - ~/data/postgres/portaldb:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: portaldb
      POSTGRES_USER: kirill
      POSTGRES_PASSWORD: 12345
    ports:
      - "5433"

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    hostname: zookeeper
    container_name: ern_zookeeper
    restart: always
    ports:
      - 2181:2181

  broker:
    image: 'bitnami/kafka:3.5.1'
    hostname: broker
    depends_on:
      - zookeeper
    restart: always
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: broker
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_BROKER_ID: 0
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock